import telebot
from telebot import types
import time
import random

bot = telebot.TeleBot('5627151433:AAE9GbzdGGom3S1-LM88m1iSVvvVm7Q9_UI') #IP —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# üëâ üôè üëÜ üëá üòÖ üëã üôå ‚ò∫Ô∏è ‚ùó Ô∏è‚ÄºÔ∏è ‚úåÔ∏è üëå ‚úä üë®‚Äçüíª  ü§ñ üòâ  ‚òùÔ∏è ‚ù§Ô∏è üí™ ‚úçÔ∏è üéØ  ‚õî  Ô∏è‚úÖ üìäüìàüßÆ   üó≥Ô∏è üëç üò¢


@bot.callback_query_handler(func=lambda call: True)
def step(call):
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)

    if call.data == 'next_simple1' or call.data == 'next_simple2':
        a = random.randint(1, 30)
        s = ('+')
        b = random.randint(1, 30)
        bot.send_message(call.message.chat.id, f'–†–µ—à–∏—Ç–µ –º–æ–π –ø—Ä–∏–º–µ—Ä: {a} {s} {b} = ?\nü§ñ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç üëá')#–±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ

        markup1 = types.InlineKeyboardMarkup(row_width=1)#–∫–Ω–æ–ø–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        markup1.add(types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä', callback_data='next_simple1'))#—Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ

        markup2 = types.InlineKeyboardMarkup()#–∫–Ω–æ–ø–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        markup2.add(types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data='next_simple2'))#—Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            x = int(message.text)#x=—Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if x == (a + b):
                bot.send_message(message.chat.id, f'–ú–æ–ª–æ–¥–µ—Ü, –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç üëç', reply_markup=markup1)
            else:
                bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π üò¢', reply_markup=markup2)

        bot.register_next_step_handler(call.message, message_input)

    if call.data == 'next_middle1' or call.data == 'next_middle2':
        o = random.randint(1, 100)
        s = ('+')
        d = random.randint(1, 100)
        bot.send_message(call.message.chat.id,
                         f'–†–µ—à–∏—Ç–µ –º–æ–π –ø—Ä–∏–º–µ—Ä: {o} {s} {d} = ?\nü§ñ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç üëá')  # –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ

        markup3 = types.InlineKeyboardMarkup(row_width=1)  # –∫–Ω–æ–ø–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        markup3.add(
            types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä', callback_data='next_middle1'))  # —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ

        markup4 = types.InlineKeyboardMarkup()  # –∫–Ω–æ–ø–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        markup4.add(types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                                               callback_data='next_middle2'))  # —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            x = int(message.text)  # x=—Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if x == (o + d):
                bot.send_message(message.chat.id, f'–ú–æ–ª–æ–¥–µ—Ü, –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç üëç', reply_markup=markup3)
            else:
                bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π üò¢', reply_markup=markup4)

        bot.register_next_step_handler(call.message, message_input)

    if call.data == 'next_hard1' or call.data == 'next_hard2':
        y = random.randint(1, 500)
        s = ('+')
        i = random.randint(1, 500)
        bot.send_message(call.message.chat.id,
                         f'–†–µ—à–∏—Ç–µ –º–æ–π –ø—Ä–∏–º–µ—Ä: {o} {s} {d} = ?\nü§ñ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç üëá')  # –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ

        markup5 = types.InlineKeyboardMarkup(row_width=1)  # –∫–Ω–æ–ø–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        markup5.add(types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä', callback_data='next_hard1'))  # —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ

        markup6 = types.InlineKeyboardMarkup()  # –∫–Ω–æ–ø–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        markup6.add(types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data='next_hard2'))  # —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            x = int(message.text)  # x=—Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if x == (o + d):
                bot.send_message(message.chat.id, f'–ú–æ–ª–æ–¥–µ—Ü, –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç üëç', reply_markup=markup5)
            else:
                bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π üò¢', reply_markup=markup6)

        bot.register_next_step_handler(call.message, message_input)


# region –ö–æ–º–∞–Ω–¥–∞ START
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, f'–í–∞—à user ID: `{message.chat.id}`', parse_mode='Markdown')#–±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "...", –¥–µ–ª–∞–µ—Ç –≤—Å–µ –±—É–∫–≤—ã –º–∞–ª–µ–Ω—å–∫–∏–º–∏

    first_name = message.from_user.first_name
    message_text = f'–ü—Ä–∏–≤–µ—Ç *{first_name}*! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç–Ω—ã–π —Å—á–µ—Ç –≤ —É–º–µ, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ üëá\n\n' \
                   f'–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å [—Å—Å—ã–ª–∫–æ–π](https://t.me/lizzerd18).'


    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
    btn1 = types.KeyboardButton('–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å')#–∫–Ω–æ–ø–∫–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    btn2 = types.KeyboardButton('–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å')
    btn3 = types.KeyboardButton('–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å')
    markup.add(btn1, btn2, btn3)


    bot.send_message(message.chat.id, message_text, parse_mode='Markdown', disable_web_page_preview=True, reply_markup=markup)
# endregion –ö–æ–º–∞–Ω–¥–∞ START

@bot.message_handler(content_types=['text'])
def mess(message):
    get_message_bot = message.text.strip()

    if get_message_bot == "–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å":
        a = random.randint(1, 30)
        s = ('+')
        b = random.randint(1, 30)
        bot.send_message(message.chat.id, f'–†–µ—à–∏—Ç–µ –º–æ–π –ø—Ä–∏–º–µ—Ä: {a} {s} {b} = ?\nü§ñ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç üëá')

        markup1 = types.InlineKeyboardMarkup(row_width=1)
        markup1.add(types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä', callback_data='next_simple1'))

        markup2 = types.InlineKeyboardMarkup(row_width=1)
        markup2.add(types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data='next_simple2'))

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            x = int(message.text)
            if x == (a + b):
                bot.send_message(message.chat.id, f'–ú–æ–ª–æ–¥–µ—Ü, –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç üëç', reply_markup=markup1)
            else:
                bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π üò¢', reply_markup=markup2)
        bot.register_next_step_handler(message, message_input)

    elif get_message_bot == "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å":
        o = random.randint(1, 100)
        s = ('+')
        d = random.randint(1, 100)
        bot.send_message(message.chat.id, f'–†–µ—à–∏—Ç–µ –º–æ–π –ø—Ä–∏–º–µ—Ä: {o} {s} {d} = ?\nü§ñ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç üëá')

        markup3 = types.InlineKeyboardMarkup(row_width=1)
        markup3.add(types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä', callback_data ='next_middle1'))

        markup4 = types.InlineKeyboardMarkup()
        markup4.add(types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data ='next_middle2'))

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            q = int(message.text)
            if q == (o + d):
                bot.send_message(message.chat.id, f'–ú–æ–ª–æ–¥–µ—Ü, –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç üëç', reply_markup=markup3)
            else:
                bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π üò¢', reply_markup=markup4)

        bot.register_next_step_handler(message, message_input)

    elif get_message_bot == "–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å":
        y = random.randint(1, 500)
        s = ('+')
        i = random.randint(1, 500)
        bot.send_message(message.chat.id, f'–†–µ—à–∏—Ç–µ –º–æ–π –ø—Ä–∏–º–µ—Ä: {y} {s} {i} = ?\nü§ñ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç üëá')

        markup5 = types.InlineKeyboardMarkup(row_width=1)
        markup5.add(types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä', callback_data='next_hard1'))

        markup6 = types.InlineKeyboardMarkup(row_width=1)
        markup6.add(types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data='next_hard2'))

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            x = int(message.text)
            if x == (y + i):
                bot.send_message(message.chat.id, f'–ú–æ–ª–æ–¥–µ—Ü, –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç üëç', reply_markup=markup5)
            else:
                bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π üò¢', reply_markup=markup6)

        bot.register_next_step_handler(message, message_input)

    else:
        bot.send_message(message.chat.id, 'ü§ñ —è –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ..')

if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            time.sleep(3)
            print(e)